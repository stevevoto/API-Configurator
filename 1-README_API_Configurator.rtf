{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\froman\fcharset0 Times-BoldItalic;
\f3\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\vieww12000\viewh15840\viewkind0
\deftab720
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f0\b\fs22 \cf0 README for API-Configurator Program\
\

\fs20 \ul Overview
\f1\b0 \ulnone \
The API-Configurator program is a Python script designed to manage various networking components within a Mist organization using the Mist API. It supports creating, modifying, and managing configurations for:
\f0\b \
\pard\pardeftab720\sl120\slmult1\sa200\partightenfactor0
\cf0 - Applications/Services\
- Networks\
- Sites\
- Hub Profiles\
- WAN Edges
\f1\b0 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 The script reads configuration details from JSON files and submits them to the Mist API, ensuring flexibility and efficient management of organizational resources.\
\

\f0\b \ul Features
\f1\b0 \ulnone \
\pard\pardeftab720\sl120\slmult1\sa200\partightenfactor0
\cf0 1. Reads Mist API token and organization ID from a file (Token-Org.txt).\
2. Processes JSON files for different resource types (e.g., app-*.json, net-*.json).\
3. Automatically converts Python booleans (True/False) to Mist-compatible strings ("true"/"false").\
4. Displays detailed debug information for requests and responses.\
5. Automatically handles naming conflicts for WAN Edges with a name-increment logic.\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 \

\f0\b \ul Setup
\f1\b0 \ulnone \

\f0\b Step 1: Prerequisites
\f1\b0 \
\pard\pardeftab720\sl120\slmult1\sa200\partightenfactor0
\cf0 1. Python 3.x (Ensure Python 3 is installed on your system).\
2. Requests Library: Install using the command:\
\pard\pardeftab720\li720\sl120\slmult1\sa200\partightenfactor0
\cf0   pip install requests\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f0\b \cf0 Step 2: Prepare the Token-Org.txt File
\f1\b0 \
Create a file named Token-Org.txt in the same directory as the script. Add the following lines, replacing <your_token> and <your_org_id> with your Mist API token and organization ID:\
\pard\pardeftab720\li720\sl120\slmult1\sa200\partightenfactor0
\cf0 token=<your_token>\
org_id=<your_org_id>\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f0\b \cf0 \ul \ulc0 Usage
\f1\b0 \ulnone \

\f0\b Step 1: Run the Script
\f1\b0 \
\pard\pardeftab720\sl120\slmult1\sa200\partightenfactor0
\cf0 Run the script in a terminal using the following command:\
\pard\pardeftab720\li720\sl120\slmult1\sa200\partightenfactor0
\cf0   python3 api-configurator.py\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 \

\f0\b Step 2: JSON Files
\f1\b0 \
Place your configuration files in the same directory as the script. Each file should follow the naming convention based on its type:\
\pard\pardeftab720\sl120\slmult1\sa200\partightenfactor0

\f0\b \cf0 - Applications: app-*.json\
- Networks: net-*.json\
- Sites: site-*.json\
- Hub Profiles: hub-*.json\
- WAN Edges: wan-*.json
\f1\b0 \
\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f0\b \cf0 Step 3: Run Configuration Submission
\f1\b0 \
When the script runs, it will automatically detect and submit valid JSON files to the Mist API. For each resource type:\
\pard\pardeftab720\sl120\slmult1\sa200\partightenfactor0
\cf0 1. JSON files are read and parsed.\
2. Data is submitted to the Mist API using the appropriate endpoints.\
3. Debug information is displayed to show progress and results.\
\
\pard\pardeftab720\sl120\slmult1\sa200\partightenfactor0

\f0\b \cf0 Step 4: Run Code
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f2\i\b\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 python3 api-configurator.py --get
\f3\i0\b0 . (get will create a backup folder time/date of all files in the org)\
\
or...\
\

\f2\i\b python3 api-configurator.py --post
\f3\i0\b0  (post will post any json files with prefixes to the org)\
\

\f1\fs20 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f0\b \cf0 \ul Examples
\f1\b0 \ulnone \

\f0\b Example 1: Submitting Applications\

\f1\b0 Place all app-*.json files in the directory. Run:\
\pard\pardeftab720\li720\sl276\slmult1\sa200\partightenfactor0
\cf0   python3 api-configurator.py\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 The script will process and submit all application configurations to Mist.\
\

\f0\b Example 2: Handling WAN Edge Name Conflicts
\f1\b0 \
The script automatically handles naming conflicts for WAN Edge configurations by appending a numeric suffix (e.g., "WAN-Edge-1", "WAN-Edge-2").\
\

\f0\b \ul Error Handling
\f1\b0 \ulnone \
\pard\pardeftab720\sl120\slmult1\sa200\partightenfactor0
\cf0 1. Token or Org ID Missing:\
   If the Token-Org.txt file is missing or incorrectly formatted, the script will display:\
   [ERROR] Token-Org.txt file not found. Please ensure it exists with 'token=<your_token>' and 'org_id=<your_org_id>'.\
2. Invalid JSON:\
   The script skips invalid JSON files and logs errors for debugging.\
3. API Errors:\
   If the Mist API returns an error, the script will log the status code and response message for debugging.\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 \

\f0\b \ul Contact
\f1\b0 \ulnone \
\
For support or additional functionality requests, please reach out to Steve V}